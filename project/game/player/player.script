local car = hash(tostring("/assets/images/cars/"..colour.."/"..colour.."car.texturesetc"))

go.property("blue", resource.atlas("/assets/images/cars/blue/bluecar.atlas"))
go.property("green", resource.atlas("/assets/images/cars/green/greencar.atlas"))
go.property("red", resource.atlas("/assets/images/cars/red/redcar.atlas"))

-- Pre Hashing
---- Collisions
local contact = hash("contact_point_response")
local collision = hash("collision_response")
local trigger = hash("trigger_response")
local road = hash("road") -- Speed boost
local hazard = hash("haz") -- Collision
local powerup = hash("powerup") -- Powerup
---- Inputs
local forward = hash("up")
local back = hash("down")
local left = hash("left")
local right = hash("right")
local boost = hash("space") -- Boosting

-- Movement
local move_acceleration = 500
local max_speed = 1000
local grass_accfact = 0.6
local boost_speed = 1.2
local powerup_speed = 1.5

-- 48px * k = 0.00286mile
-- k = 0.00286mile/48px
local function mph(pxls,dt)
	local mile_psec = (pxls*(0.00286/144))/dt
	local mile_phour = mile_psec*60

	-- Using fake values because the actual one is like 12k mph
	return mile_phour
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.dt = 0

	self.vel = vmath.vector3() -- velocity
	self.correction = vmath.vector3() -- collision correction
	self.move_input = vmath.vector3() -- x/y movement input
	self.road_contact = false -- is on road

	self.boost = false -- is boosting
	self.booster = 5 -- boost timer

	self.speed_time = 0
	--self.other_time = 0

	self.turning = false -- is turning

	self.map_update = 0

	self.time_elapsed = 0
	self.time_lap = 0
	self.laps = 0
	self.trigs = {true,true,true,true}

	if car == self.blue then
		go.set("#car", "image", self.blue)
	elseif car == self.green then
		go.set("#car", "image", self.green)
	elseif car == self.red then
		go.set("#car", "image", self.red)
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	self.dt = dt
	if dt > 0 then
		if self.speed_time > 0 then
			self.speed_time = self.speed_time - dt
		end
		if self.laps > 0 and self.laps <= 3 then
			-- Lap and Elapsed time
			local time = tonumber(self.time_elapsed)
			self.time_elapsed = self.time_elapsed + dt
			self.time_lap = self.time_lap + dt
			if math.floor(self.time_elapsed*100)/100 > math.floor(time*100)/100 then
				msg.post("#screen", "time_elapsed",{
					time = tostring(math.floor(self.time_elapsed*100)),
					lap_time = tostring(math.floor(self.time_lap*100))
				})
			end
		end

		if self.laps > 3 then
			if self.time_elapsed > 0 then
				self.time_elapsed = 0
				self.move_input = vmath.vector3()
				msg.post(".", "release_input_focus")
			end
		end

		-- Boost Timer
		if self.boost then -- if boosting
			if self.booster >= 0 then -- if boost time > min time
				self.booster = self.booster - dt -- decrement boost time
				msg.post("#screen", "boost", {time = self.booster})
			end
			if math.ceil(self.booster) == 0 then -- if boost time <= min time
				self.booster = -2 -- set boost cooldown
				self.boost = false -- not boosting
			end
		end
		if not self.boost then -- if not boosting
			if self.booster < 5 then -- if boost time <= max time
				self.booster = self.booster + dt -- increment boost time
				msg.post("#screen", "boost", {time = self.booster})
			end
			if self.booster > 5 then -- if boost time > max time
				self.booster = 5 -- clamp boost time
			end
		end
		-- []

		-- Rotation handling
		local new_rot = -self.move_input.x*(math.pi/2.75)*dt

		-- Conditional Speed Increase
		if not self.road_contact then -- if not touching the road
			max_speed = max_speed * grass_accfact -- lower top speed
			new_rot = new_rot * grass_accfact
		end
		if self.boost and self.booster > 0 then -- if the player is boosting
			max_speed = max_speed * boost_speed -- higher top speed
			new_rot = new_rot * boost_speed
		end
		if self.speed_time > 0 then
			max_speed = max_speed * powerup_speed
			new_rot = new_rot * powerup_speed
		end
		new_rot = vmath.quat_rotation_z(new_rot)
		--[]

		local c_rotat = go.get_rotation() -- Get player rotation
		go.set_rotation(go.get_rotation()*new_rot) -- Set new player rotation
		--[]

		local target_speed = self.move_input.y * max_speed -- Define target speed
		local speed_diff = target_speed - self.vel.y -- difference in velocity of x

		local speed_diff_x = 0 - self.vel.x -- difference in velocity

		local acceleration = vmath.vector3()
		if speed_diff ~= 0 then -- if there is a difference
			if speed_diff > 0 then -- if the difference is positive
				acceleration.y = move_acceleration -- accelerate
			elseif speed_diff < 0 then -- if the difference is negative
				acceleration.y = -move_acceleration -- decelerate
			end
		end

		if speed_diff_x ~= 0 then -- if there is a difference
			if speed_diff_x > 0 then -- if the difference is positive
				acceleration.x = move_acceleration*2 -- accelerate
			elseif speed_diff_x < 0 then -- if the difference is negative
				acceleration.x = -move_acceleration*2 -- decelerate
			end
		end

		if not self.road_contact then -- if not touching the road
			acceleration = acceleration * grass_accfact -- slow acceleration
		end

		-- if player is boosting and acceleration is greater than 0
		if self.boost and self.booster > 0 and acceleration.x > 0 then
			acceleration = acceleration * boost_speed -- fast acceleration
		end

		-- if the player is powered up
		if self.speed_time > 0 and acceleration.x > 0 then
			acceleration = acceleration * boost_speed -- fast acceleration
		end

		local dv = acceleration * dt -- delta velocity
		if math.abs(dv.y) > math.abs(speed_diff) then -- if too much acceleration
			dv.y = speed_diff -- clamp acceleration
		end

		if math.abs(dv.x) > math.abs(speed_diff_x) then -- if too much acceleration
			dv.x = speed_diff_x -- clamp acceleration
		end
		-- Store initial velocity
		local u = self.vel
		-- Add acceleration to new velocity
		self.vel = self.vel + dv
		-- add vectors (delta position)
		local dp = vmath.rotate(c_rotat,(u + self.vel) *dt *0.5)
		go.set_position(go.get_position()+dp)

		self.correction = vmath.vector3()
		self.move_input = vmath.vector3()
		self.road_contact = false
		max_speed = 800

		-- Map Updater
		if self.map_update >= 0.1 then
			self.map_update = 0
			local mile_phour = mph(self.vel.y, dt)
			if dp ~= 0 then
				msg.post("#screen", "pos",{pos = go.get_position(),speed=mile_phour})
			end
		else
			self.map_update = self.map_update + dt
		end
	end
end

local function handle_obstacle_contact(self, normal, distance)
	local rotation = vmath.conj(go.get_rotation()) * vmath.quat_rotation_z(math.rad(0))
	-- rotate velocity
	self.vel = vmath.rotate(go.get_rotation(), self.vel)
	-- project the correction vector onto the contact normal
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- project the velocity onto the normal
	proj = vmath.dot(self.vel, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.vel = self.vel - proj * normal
	end
	self.vel = vmath.rotate(rotation, self.vel)
end

function on_message(self, message_id, message, sender)
	if message_id == powerup then
		if message.type == 1 then
			self.speed_time = 10
		end
	end
	if message_id == collision then
		if message.group == road then
			self.road_contact = true
		end
	end
	if message_id == contact then
		if message.group == hazard then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
	if message_id == trigger then
		if message.enter then
			if message.other_id == hash("/line") then
				local all = true
				local flagged = 4
				for i = 1, #self.trigs do
					if not self.trigs[i] then
						all = false
					end
				end
				if all then
					if self.laps > 0 then
						msg.post("#screen", "lap_time",{
							time = tostring(math.floor(self.time_lap*100)),
							laps = self.laps
						})
					else
						msg.post("/AI", "go")
					end
					self.time_lap = 0
					self.laps = self.laps + 1
					for i = 1, #self.trigs do
						self.trigs[i] = false
					end
				end
			elseif message.other_id == hash("/road_trig1") then
				self.trigs[1] = true
			elseif message.other_id == hash("/road_trig2") then
				if self.trigs[1] then
					self.trigs[2] = true
				end
			elseif message.other_id == hash("/road_trig3") then
				if self.trigs[2] then
					self.trigs[3] = true
				end
			elseif message.other_id == hash("/road_trig4") then
				if self.trigs[3] then
					self.trigs[4] = true
				end
			end
		end
	end
end

function on_input(self, action_id, action)
	if self.dt > 0 then
		if action_id == forward then
			self.move_input.y = action.value
		elseif action_id == back then
			self.move_input.y = -action.value
		elseif action_id == right then
			if math.abs(vmath.length(self.vel)) >= 1 then
				self.move_input.x = action.value
			else
				self.move_input.x = action.value/2
			end

			if not self.turning then
				self.turning = true
				sprite.play_flipbook("#car", "drive",function()
					sprite.play_flipbook("#car", "right")
					if math.abs(vmath.length(self.vel)) >= 1 then
						particlefx.play("#driftr")
						particlefx.play("#drift")
					end
				end)
			end
			if action.released then
				particlefx.stop("#driftr")
				particlefx.stop("#drift")
				if self.turning then
					sprite.play_flipbook("#car", "right_back",function()
						sprite.play_flipbook("#car", "drive")
					end)
					self.turning = false
				end
			end
		elseif action_id == left then
			if math.abs(vmath.length(self.vel)) >= 1 then
				self.move_input.x = -action.value
			else
				self.move_input.x = -action.value/2
			end

			if not self.turning then
				self.turning = true
				sprite.play_flipbook("#car", "drive",function()
					sprite.play_flipbook("#car", "left")
					if math.abs(vmath.length(self.vel)) >= 1 then
						particlefx.play("#driftl")
						particlefx.play("#drift")
					end
				end)
			end

			if action.released then
				particlefx.stop("#driftl")
				particlefx.stop("#drift")
				if self.turning then
					sprite.play_flipbook("#car", "left_back",function()
						sprite.play_flipbook("#car", "drive")
					end)
					self.turning = false
				end
			end
		end
		if action_id == boost then
			if action.pressed then
				self.boost = true
				particlefx.play("#boost")
			elseif action.released then
				self.boost = false
				particlefx.stop("#boost")
			end
		end
	end
end
